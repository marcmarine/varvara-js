---


const { code, lang = 'javascript', className = '' } = Astro.props


---

<va-code data-lang={lang} data-code={code} class={className}></va-code>

<script>
  import { codeToHtml } from 'shiki'
  export class VaCode extends HTMLElement {
    constructor() {
      super()
    }

    async connectedCallback() {
      const code = this.dataset.code || ''
      const lang = this.dataset.lang || 'bash'

      const html = await codeToHtml(code, {
        lang,
        themes: {
          light: 'one-light',
          dark: 'one-dark-pro'
        }
      })

      this.classList.add('va-card')
      this.style.display = 'block'

      const codeContainer = document.createElement('div')
      codeContainer.className = 'va-card__body'
      codeContainer.style.padding = '0'
      codeContainer.innerHTML = html

      const actions = document.createElement('div')
      actions.className = 'va-card__actions'

      const copyButton = document.createElement('button')
      copyButton.className = 'va-button va-button--action !text-right'
      copyButton.textContent = 'Copy'
      copyButton.addEventListener('click', () => {
        navigator.clipboard.writeText(code)
        copyButton.textContent = 'Copied'
        setTimeout(() => {
          copyButton.textContent = 'Copy'
        }, 2000)
      })

      const langButton = document.createElement('button')
      langButton.className = 'va-button'
      langButton.textContent = lang.toUpperCase()

      actions.appendChild(langButton)
      actions.appendChild(copyButton)

      this.appendChild(codeContainer)
      this.appendChild(actions)
    }
  }

  customElements.define('va-code', VaCode)
</script>
